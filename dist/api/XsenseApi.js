"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XsenseApi = void 0;
const events_1 = require("events");
const axios_1 = __importDefault(require("axios"));
const amazon_cognito_identity_js_1 = require("amazon-cognito-identity-js");
const mqtt_1 = require("mqtt");
const constants_1 = require("./constants");
class XsenseApi extends events_1.EventEmitter {
    constructor(email, password, log) {
        super();
        this.email = email;
        this.password = password;
        this.session = null;
        this.mqttClient = null;
        this.lastKnownDevices = [];
        this.log = log;
        this.userPool = new amazon_cognito_identity_js_1.CognitoUserPool({
            UserPoolId: constants_1.USER_POOL_ID,
            ClientId: constants_1.CLIENT_ID,
        });
        this.user = new amazon_cognito_identity_js_1.CognitoUser({
            Username: this.email,
            Pool: this.userPool,
        });
        this.authDetails = new amazon_cognito_identity_js_1.AuthenticationDetails({
            Username: this.email,
            Password: this.password,
        });
        this.http = axios_1.default.create({
            baseURL: constants_1.API_HOST,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        this.http.interceptors.request.use((config) => {
            if (this.session && config.headers) {
                config.headers['token'] = this.session.getIdToken().getJwtToken();
            }
            return config;
        }, (error) => Promise.reject(error));
        this.http.interceptors.response.use((response) => response, async (error) => {
            const originalRequest = error.config;
            if (error.response?.status === 401 && originalRequest && !originalRequest.headers?.['X-Retry']) {
                originalRequest.headers['X-Retry'] = 'true';
                this.log.info('Token expired, attempting to refresh...');
                try {
                    await this.refreshSession();
                    this.log.info('Token refreshed successfully.');
                    return this.http(originalRequest);
                }
                catch (refreshError) {
                    this.log.error('Failed to refresh token. Please re-login.', refreshError);
                    this.session = null;
                    return Promise.reject(refreshError);
                }
            }
            return Promise.reject(error);
        });
    }
    login() {
        return new Promise((resolve, reject) => {
            this.user.authenticateUser(this.authDetails, {
                onSuccess: (session) => {
                    this.log.debug('Cognito authentication successful.');
                    this.session = session;
                    resolve(session);
                },
                onFailure: (err) => {
                    this.log.error('Cognito authentication failed:', err.message);
                    reject(err);
                },
            });
        });
    }
    refreshSession() {
        return new Promise((resolve, reject) => {
            const refreshToken = this.session?.getRefreshToken();
            if (!refreshToken) {
                return reject(new Error('No refresh token available.'));
            }
            this.user.refreshSession(refreshToken, (err, session) => {
                if (err) {
                    return reject(err);
                }
                this.session = session;
                resolve(session);
            });
        });
    }
    async getDeviceList() {
        this.log.debug('Fetching device list...');
        const response = await this.http.post('/v1/user/getDeviceList', {
            'userId': this.session?.getIdToken().payload.sub,
        });
        if (response.data.code !== 0) {
            throw new Error(`Error fetching device list: ${response.data.msg} (code: ${response.data.code})`);
        }
        // Store for later use in MQTT reconnects
        this.lastKnownDevices = response.data.data ?? [];
        return this.lastKnownDevices;
    }
    async getIotCredential() {
        this.log.debug('Fetching IoT credentials...');
        const response = await this.http.post('/v1/user/getIotCredential', {});
        if (response.data.code !== 0) {
            throw new Error(`Error fetching IoT credentials: ${response.data.msg} (code: ${response.data.code})`);
        }
        if (!response.data.data) {
            throw new Error('IoT credentials response is empty.');
        }
        this.log.debug('Successfully fetched IoT credentials.');
        return response.data.data;
    }
    async connectMqtt() {
        if (this.lastKnownDevices.length === 0) {
            this.log.warn('No devices available to connect to MQTT. Call getDeviceList first.');
            return;
        }
        if (this.mqttClient?.connected) {
            this.log.debug('MQTT client is already connected.');
            return;
        }
        try {
            const creds = await this.getIotCredential();
            // Proactively refresh credentials 5 minutes before they expire
            const expiration = new Date(creds.expiration).getTime();
            const now = Date.now();
            const refreshDelay = expiration - now - (5 * 60 * 1000);
            if (this.mqttRefreshTimer) {
                clearTimeout(this.mqttRefreshTimer);
            }
            this.mqttRefreshTimer = setTimeout(() => this.reconnectMqtt(), Math.max(0, refreshDelay));
            this.log.info(`Scheduled MQTT credential refresh in ${Math.round(refreshDelay / 60000)} minutes.`);
            const uniqueStationSns = [...new Set(this.lastKnownDevices.map(d => d.station_sn))];
            this.log.info(`Connecting to MQTT broker at wss://${creds.iotEndpoint}/mqtt`);
            this.mqttClient = (0, mqtt_1.connect)({
                host: creds.iotEndpoint,
                protocol: 'wss',
                clientId: `homebridge-xsense_${Math.random().toString(16).substring(2, 10)}`,
                accessKeyId: creds.accessKey,
                secretAccessKey: creds.secretKey,
                sessionToken: creds.sessionToken,
                reconnectPeriod: 5000,
            });
            this.mqttClient.on('connect', () => {
                this.log.info('MQTT client connected.');
                uniqueStationSns.forEach(stationSn => {
                    const houseId = stationSn.split('_')[0];
                    const eventTopic = `@xsense/events/1/${houseId}/${stationSn}`;
                    const shadowTopic = `$aws/things/${stationSn}/shadow/name/+/update`;
                    this.mqttClient?.subscribe([eventTopic, shadowTopic], (err) => {
                        if (!err) {
                            this.log.debug(`Subscribed to ${eventTopic} and ${shadowTopic}`);
                        }
                        else {
                            this.log.error(`Failed to subscribe for station ${stationSn}:`, err);
                        }
                    });
                });
            });
            this.mqttClient.on('message', (topic, payload) => {
                this.log.debug(`MQTT message received on topic ${topic}:`, payload.toString());
                try {
                    const message = JSON.parse(payload.toString());
                    this.emit('message', topic, message);
                }
                catch (e) {
                    this.log.error(`Failed to parse MQTT message: ${payload.toString()}`, e);
                }
            });
            this.mqttClient.on('error', (error) => this.log.error('MQTT client error:', error));
            this.mqttClient.on('reconnect', () => this.log.info('MQTT client reconnecting...'));
            this.mqttClient.on('close', () => this.log.info('MQTT client connection closed.'));
        }
        catch (error) {
            this.log.error('Failed to connect to MQTT broker:', error);
        }
    }
    async reconnectMqtt() {
        this.log.info('Attempting to refresh MQTT connection credentials and reconnect...');
        this.disconnectMqtt(false);
        await this.connectMqtt();
    }
    disconnectMqtt(clearTimers = true) {
        if (this.mqttClient) {
            this.log.info('Disconnecting MQTT client.');
            this.mqttClient.end(true);
            this.mqttClient = null;
        }
        if (clearTimers && this.mqttRefreshTimer) {
            clearTimeout(this.mqttRefreshTimer);
            this.mqttRefreshTimer = undefined;
        }
    }
}
exports.XsenseApi = XsenseApi;
//# sourceMappingURL=data:application/json;base64,