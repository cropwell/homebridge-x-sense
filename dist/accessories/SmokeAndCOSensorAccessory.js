"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmokeAndCOSensorAccessory = void 0;
/**
 * Manages a single X-Sense Smoke and CO combination sensor accessory.
 */
class SmokeAndCOSensorAccessory {
    constructor(platform, accessory) {
        this.platform = platform;
        this.accessory = accessory;
        this.state = {
            smokeDetected: this.platform.Characteristic.SmokeDetected.SMOKE_NOT_DETECTED,
            coDetected: this.platform.Characteristic.CarbonMonoxideDetected.CO_LEVELS_NORMAL,
            batteryLevel: 100,
            statusLowBattery: this.platform.Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL,
        };
        this.accessory.getService(this.platform.Service.AccessoryInformation)
            .setCharacteristic(this.platform.Characteristic.Manufacturer, 'X-Sense')
            .setCharacteristic(this.platform.Characteristic.Model, accessory.context.device_model)
            .setCharacteristic(this.platform.Characteristic.SerialNumber, accessory.context.device_id);
        this.smokeService = this.accessory.getService(this.platform.Service.SmokeSensor)
            || this.accessory.addService(this.platform.Service.SmokeSensor);
        this.smokeService.setCharacteristic(this.platform.Characteristic.Name, accessory.context.device_name);
        this.smokeService.getCharacteristic(this.platform.Characteristic.SmokeDetected)
            .onGet(() => this.state.smokeDetected);
        this.coService = this.accessory.getService(this.platform.Service.CarbonMonoxideSensor)
            || this.accessory.addService(this.platform.Service.CarbonMonoxideSensor);
        this.coService.getCharacteristic(this.platform.Characteristic.CarbonMonoxideDetected)
            .onGet(() => this.state.coDetected);
        this.batteryService = this.accessory.getService(this.platform.Service.Battery)
            || this.accessory.addService(this.platform.Service.Battery);
        this.batteryService.getCharacteristic(this.platform.Characteristic.BatteryLevel)
            .onGet(() => this.state.batteryLevel);
        this.batteryService.getCharacteristic(this.platform.Characteristic.StatusLowBattery)
            .onGet(() => this.state.statusLowBattery);
        this.updateFromDeviceInfo(accessory.context);
    }
    /**
     * Updates the accessory state from the initial device information poll.
     */
    updateFromDeviceInfo(device) {
        this.platform.log.debug(`Updating ${this.accessory.displayName} from initial info:`, device.status);
        this.updateBattery(device.status.battery);
    }
    /**
     * Updates the accessory state from a real-time MQTT shadow update.
     * These updates typically contain battery, temperature, and humidity data.
     */
    updateFromShadow(shadow) {
        this.platform.log.debug(`Updating ${this.accessory.displayName} from shadow:`, shadow);
        if (shadow.battery !== undefined) {
            this.updateBattery(shadow.battery);
        }
    }
    /**
     * Updates the accessory state from a real-time MQTT event.
     * These events are typically for alarms.
     */
    updateFromEvent(event) {
        this.platform.log.debug(`Updating ${this.accessory.displayName} from event:`, event);
        // Event type 1 is for alarm status changes
        if (event.type === 1 && event.alarmStatus !== undefined) {
            const alarmStatus = event.alarmStatus;
            // 1 = Smoke, 2 = CO, 3 = Both
            const smokeDetected = (alarmStatus === 1 || alarmStatus === 3)
                ? this.platform.Characteristic.SmokeDetected.SMOKE_DETECTED
                : this.platform.Characteristic.SmokeDetected.SMOKE_NOT_DETECTED;
            const coDetected = (alarmStatus === 2 || alarmStatus === 3)
                ? this.platform.Characteristic.CarbonMonoxideDetected.CO_LEVELS_ABNORMAL
                : this.platform.Characteristic.CarbonMonoxideDetected.CO_LEVELS_NORMAL;
            if (this.state.smokeDetected !== smokeDetected) {
                this.state.smokeDetected = smokeDetected;
                this.smokeService.updateCharacteristic(this.platform.Characteristic.SmokeDetected, this.state.smokeDetected);
                this.platform.log.info(`[${this.accessory.displayName}] Smoke alarm status changed to: ${smokeDetected === 1 ? 'DETECTED' : 'NOT DETECTED'}`);
            }
            if (this.state.coDetected !== coDetected) {
                this.state.coDetected = coDetected;
                this.coService.updateCharacteristic(this.platform.Characteristic.CarbonMonoxideDetected, this.state.coDetected);
                this.platform.log.info(`[${this.accessory.displayName}] CO alarm status changed to: ${coDetected === 1 ? 'DETECTED' : 'NORMAL'}`);
            }
        }
    }
    updateBattery(level) {
        const lowBattery = level <= 20
            ? this.platform.Characteristic.StatusLowBattery.BATTERY_LEVEL_LOW
            : this.platform.Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL;
        if (this.state.batteryLevel !== level) {
            this.state.batteryLevel = level;
            this.batteryService.updateCharacteristic(this.platform.Characteristic.BatteryLevel, this.state.batteryLevel);
            this.platform.log.debug(`[${this.accessory.displayName}] Battery level updated to ${level}%`);
        }
        if (this.state.statusLowBattery !== lowBattery) {
            this.state.statusLowBattery = lowBattery;
            this.batteryService.updateCharacteristic(this.platform.Characteristic.StatusLowBattery, this.state.statusLowBattery);
            this.platform.log.info(`[${this.accessory.displayName}] Low battery status changed to: ${lowBattery === 1 ? 'LOW' : 'NORMAL'}`);
        }
    }
}
exports.SmokeAndCOSensorAccessory = SmokeAndCOSensorAccessory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU21va2VBbmRDT1NlbnNvckFjY2Vzc29yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2Nlc3Nvcmllcy9TbW9rZUFuZENPU2Vuc29yQWNjZXNzb3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBOztHQUVHO0FBQ0gsTUFBYSx5QkFBeUI7SUFZcEMsWUFDbUIsUUFBa0MsRUFDbkMsU0FBd0M7UUFEdkMsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbkMsY0FBUyxHQUFULFNBQVMsQ0FBK0I7UUFUbEQsVUFBSyxHQUFHO1lBQ2QsYUFBYSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxrQkFBa0I7WUFDNUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQjtZQUNoRixZQUFZLEVBQUUsR0FBRztZQUNqQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0I7U0FDckYsQ0FBQztRQU1BLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFFO2FBQ25FLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUM7YUFDdkUsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO2FBQ3JGLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTdGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxD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RyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyw4QkFBOEIsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNoRyxDQUFDO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JILElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxvQ0FBb0MsVUFBVSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2xJLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUEvR0QsOERBK0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VydmljZSwgUGxhdGZvcm1BY2Nlc3NvcnkgfSBmcm9tICdob21lYnJpZGdlJztcbmltcG9ydCB7IFhTZW5zZUhvbWVicmlkZ2VQbGF0Zm9ybSB9IGZyb20gJy4uL3BsYXRmb3JtJztcbmltcG9ydCB7IERldmljZUluZm8gfSBmcm9tICcuLi9hcGkvdHlwZXMnO1xuXG4vKipcbiAqIE1hbmFnZXMgYSBzaW5nbGUgWC1TZW5zZSBTbW9rZSBhbmQgQ08gY29tYmluYXRpb24gc2Vuc29yIGFjY2Vzc29yeS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNtb2tlQW5kQ09TZW5zb3JBY2Nlc3Nvcnkge1xuICBwcml2YXRlIHNtb2tlU2VydmljZTogU2VydmljZTtcbiAgcHJpdmF0ZSBjb1NlcnZpY2U6IFNlcnZpY2U7XG4gIHByaXZhdGUgYmF0dGVyeVNlcnZpY2U6IFNlcnZpY2U7XG5cbiAgcHJpdmF0ZSBzdGF0ZSA9IHtcbiAgICBzbW9rZURldGVjdGVkOiB0aGlzLnBsYXRmb3JtLkNoYXJhY3RlcmlzdGljLlNtb2tlRGV0ZWN0ZWQuU01PS0VfTk9UX0RFVEVDVEVELFxuICAgIGNvRGV0ZWN0ZWQ6IHRoaXMucGxhdGZvcm0uQ2hhcmFjdGVyaXN0aWMuQ2FyYm9uTW9ub3hpZGVEZXRlY3RlZC5DT19MRVZFTFNfTk9STUFMLFxuICAgIGJhdHRlcnlMZXZlbDogMTAwLFxuICAgIHN0YXR1c0xvd0JhdHRlcnk6IHRoaXMucGxhdGZvcm0uQ2hhcmFjdGVyaXN0aWMuU3RhdHVzTG93QmF0dGVyeS5CQVRURVJZX0xFVkVMX05PUk1BTCxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBsYXRmb3JtOiBYU2Vuc2VIb21lYnJpZGdlUGxhdGZvcm0sXG4gICAgcHVibGljIHJlYWRvbmx5IGFjY2Vzc29yeTogUGxhdGZvcm1BY2Nlc3Nvcnk8RGV2aWNlSW5mbz4sXG4gICkge1xuICAgIHRoaXMuYWNjZXNzb3J5LmdldFNlcnZpY2UodGhpcy5wbGF0Zm9ybS5TZXJ2aWNlLkFjY2Vzc29yeUluZm9ybWF0aW9uKSFcbiAgICAgIC5zZXRDaGFyYWN0ZXJpc3RpYyh0aGlzLnBsYXRmb3JtLkNoYXJhY3RlcmlzdGljLk1hbnVmYWN0dXJlciwgJ1gtU2Vuc2UnKVxuICAgICAgLnNldENoYXJhY3RlcmlzdGljKHRoaXMucGxhdGZvcm0uQ2hhcmFjdGVyaXN0aWMuTW9kZWwsIGFjY2Vzc29yeS5jb250ZXh0LmRldmljZV9tb2RlbClcbiAgICAgIC5zZXRDaGFyYWN0ZXJpc3RpYyh0aGlzLnBsYXRmb3JtLkNoYXJhY3RlcmlzdGljLlNlcmlhbE51bWJlciwgYWNjZXNzb3J5LmNvbnRleHQuZGV2aWNlX2lkKTtcblxuICAgIHRoaXMuc21va2VTZXJ2aWNlID0gdGhpcy5hY2Nlc3NvcnkuZ2V0U2VydmljZSh0aGlzLnBsYXRmb3JtLlNlcnZpY2UuU21va2VTZW5zb3IpXG4gICAgICB8fCB0aGlzLmFjY2Vzc29yeS5hZGRTZXJ2aWNlKHRoaXMucGxhdGZvcm0uU2VydmljZS5TbW9rZVNlbnNvcik7XG4gICAgdGhpcy5zbW9rZVNlcnZpY2Uuc2V0Q2hhcmFjdGVyaXN0aWModGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5OYW1lLCBhY2Nlc3NvcnkuY29udGV4dC5kZXZpY2VfbmFtZSk7XG4gICAgdGhpcy5zbW9rZVNlcnZpY2UuZ2V0Q2hhcmFjdGVyaXN0aWModGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5TbW9rZURldGVjdGVkKVxuICAgICAgLm9uR2V0KCgpID0+IHRoaXMuc3RhdGUuc21va2VEZXRlY3RlZCk7XG5cbiAgICB0aGlzLmNvU2VydmljZSA9IHRoaXMuYWNjZXNzb3J5LmdldFNlcnZpY2UodGhpcy5wbGF0Zm9ybS5TZXJ2aWNlLkNhcmJvbk1vbm94aWRlU2Vuc29yKVxuICAgICAgfHwgdGhpcy5hY2Nlc3NvcnkuYWRkU2VydmljZSh0aGlzLnBsYXRmb3JtLlNlcnZpY2UuQ2FyYm9uTW9ub3hpZGVTZW5zb3IpO1xuICAgIHRoaXMuY29TZXJ2aWNlLmdldENoYXJhY3RlcmlzdGljKHRoaXMucGxhdGZvcm0uQ2hhcmFjdGVyaXN0aWMuQ2FyYm9uTW9ub3hpZGVEZXRlY3RlZClcbiAgICAgIC5vbkdldCgoKSA9PiB0aGlzLnN0YXRlLmNvRGV0ZWN0ZWQpO1xuXG4gICAgdGhpcy5iYXR0ZXJ5U2VydmljZSA9IHRoaXMuYWNjZXNzb3J5LmdldFNlcnZpY2UodGhpcy5wbGF0Zm9ybS5TZXJ2aWNlLkJhdHRlcnkpXG4gICAgICB8fCB0aGlzLmFjY2Vzc29yeS5hZGRTZXJ2aWNlKHRoaXMucGxhdGZvcm0uU2VydmljZS5CYXR0ZXJ5KTtcbiAgICB0aGlzLmJhdHRlcnlTZXJ2aWNlLmdldENoYXJhY3RlcmlzdGljKHRoaXMucGxhdGZvcm0uQ2hhcmFjdGVyaXN0aWMuQmF0dGVyeUxldmVsKVxuICAgICAgLm9uR2V0KCgpID0+IHRoaXMuc3RhdGUuYmF0dGVyeUxldmVsKTtcbiAgICB0aGlzLmJhdHRlcnlTZXJ2aWNlLmdldENoYXJhY3RlcmlzdGljKHRoaXMucGxhdGZvcm0uQ2hhcmFjdGVyaXN0aWMuU3RhdHVzTG93QmF0dGVyeSlcbiAgICAgIC5vbkdldCgoKSA9PiB0aGlzLnN0YXRlLnN0YXR1c0xvd0JhdHRlcnkpO1xuXG4gICAgdGhpcy51cGRhdGVGcm9tRGV2aWNlSW5mbyhhY2Nlc3NvcnkuY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgYWNjZXNzb3J5IHN0YXRlIGZyb20gdGhlIGluaXRpYWwgZGV2aWNlIGluZm9ybWF0aW9uIHBvbGwuXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlRnJvbURldmljZUluZm8oZGV2aWNlOiBEZXZpY2VJbmZvKTogdm9pZCB7XG4gICAgdGhpcy5wbGF0Zm9ybS5sb2cuZGVidWcoYFVwZGF0aW5nICR7dGhpcy5hY2Nlc3NvcnkuZGlzcGxheU5hbWV9IGZyb20gaW5pdGlhbCBpbmZvOmAsIGRldmljZS5zdGF0dXMpO1xuICAgIHRoaXMudXBkYXRlQmF0dGVyeShkZXZpY2Uuc3RhdHVzLmJhdHRlcnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGFjY2Vzc29yeSBzdGF0ZSBmcm9tIGEgcmVhbC10aW1lIE1RVFQgc2hhZG93IHVwZGF0ZS5cbiAgICogVGhlc2UgdXBkYXRlcyB0eXBpY2FsbHkgY29udGFpbiBiYXR0ZXJ5LCB0ZW1wZXJhdHVyZSwgYW5kIGh1bWlkaXR5IGRhdGEuXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlRnJvbVNoYWRvdyhzaGFkb3c6IGFueSk6IHZvaWQge1xuICAgIHRoaXMucGxhdGZvcm0ubG9nLmRlYnVnKGBVcGRhdGluZyAke3RoaXMuYWNjZXNzb3J5LmRpc3BsYXlOYW1lfSBmcm9tIHNoYWRvdzpgLCBzaGFkb3cpO1xuICAgIGlmIChzaGFkb3cuYmF0dGVyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZUJhdHRlcnkoc2hhZG93LmJhdHRlcnkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBhY2Nlc3Nvcnkgc3RhdGUgZnJvbSBhIHJlYWwtdGltZSBNUVRUIGV2ZW50LlxuICAgKiBUaGVzZSBldmVudHMgYXJlIHR5cGljYWxseSBmb3IgYWxhcm1zLlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUZyb21FdmVudChldmVudDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5wbGF0Zm9ybS5sb2cuZGVidWcoYFVwZGF0aW5nICR7dGhpcy5hY2Nlc3NvcnkuZGlzcGxheU5hbWV9IGZyb20gZXZlbnQ6YCwgZXZlbnQpO1xuXG4gICAgLy8gRXZlbnQgdHlwZSAxIGlzIGZvciBhbGFybSBzdGF0dXMgY2hhbmdlc1xuICAgIGlmIChldmVudC50eXBlID09PSAxICYmIGV2ZW50LmFsYXJtU3RhdHVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGFsYXJtU3RhdHVzID0gZXZlbnQuYWxhcm1TdGF0dXM7XG4gICAgICAvLyAxID0gU21va2UsIDIgPSBDTywgMyA9IEJvdGhcbiAgICAgIGNvbnN0IHNtb2tlRGV0ZWN0ZWQgPSAoYWxhcm1TdGF0dXMgPT09IDEgfHwgYWxhcm1TdGF0dXMgPT09IDMpXG4gICAgICAgID8gdGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5TbW9rZURldGVjdGVkLlNNT0tFX0RFVEVDVEVEXG4gICAgICAgIDogdGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5TbW9rZURldGVjdGVkLlNNT0tFX05PVF9ERVRFQ1RFRDtcblxuICAgICAgY29uc3QgY29EZXRlY3RlZCA9IChhbGFybVN0YXR1cyA9PT0gMiB8fCBhbGFybVN0YXR1cyA9PT0gMylcbiAgICAgICAgPyB0aGlzLnBsYXRmb3JtLkNoYXJhY3RlcmlzdGljLkNhcmJvbk1vbm94aWRlRGV0ZWN0ZWQuQ09fTEVWRUxTX0FCTk9STUFMXG4gICAgICAgIDogdGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5DYXJib25Nb25veGlkZURldGVjdGVkLkNPX0xFVkVMU19OT1JNQUw7XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLnNtb2tlRGV0ZWN0ZWQgIT09IHNtb2tlRGV0ZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5zbW9rZURldGVjdGVkID0gc21va2VEZXRlY3RlZDtcbiAgICAgICAgdGhpcy5zbW9rZVNlcnZpY2UudXBkYXRlQ2hhcmFjdGVyaXN0aWModGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5TbW9rZURldGVjdGVkLCB0aGlzLnN0YXRlLnNtb2tlRGV0ZWN0ZWQpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtLmxvZy5pbmZvKGBbJHt0aGlzLmFjY2Vzc29yeS5kaXNwbGF5TmFtZX1dIFNtb2tlIGFsYXJtIHN0YXR1cyBjaGFuZ2VkIHRvOiAke3Ntb2tlRGV0ZWN0ZWQgPT09IDEgPyAnREVURUNURUQnIDogJ05PVCBERVRFQ1RFRCd9YCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmNvRGV0ZWN0ZWQgIT09IGNvRGV0ZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5jb0RldGVjdGVkID0gY29EZXRlY3RlZDtcbiAgICAgICAgdGhpcy5jb1NlcnZpY2UudXBkYXRlQ2hhcmFjdGVyaXN0aWModGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5DYXJib25Nb25veGlkZURldGVjdGVkLCB0aGlzLnN0YXRlLmNvRGV0ZWN0ZWQpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtLmxvZy5pbmZvKGBbJHt0aGlzLmFjY2Vzc29yeS5kaXNwbGF5TmFtZX1dIENPIGFsYXJtIHN0YXR1cyBjaGFuZ2VkIHRvOiAke2NvRGV0ZWN0ZWQgPT09IDEgPyAnREVURUNURUQnIDogJ05PUk1BTCd9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVCYXR0ZXJ5KGxldmVsOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBsb3dCYXR0ZXJ5ID0gbGV2ZWwgPD0gMjBcbiAgICAgID8gdGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5TdGF0dXNMb3dCYXR0ZXJ5LkJBVFRFUllfTEVWRUxfTE9XXG4gICAgICA6IHRoaXMucGxhdGZvcm0uQ2hhcmFjdGVyaXN0aWMuU3RhdHVzTG93QmF0dGVyeS5CQVRURVJZX0xFVkVMX05PUk1BTDtcblxuICAgIGlmICh0aGlzLnN0YXRlLmJhdHRlcnlMZXZlbCAhPT0gbGV2ZWwpIHtcbiAgICAgIHRoaXMuc3RhdGUuYmF0dGVyeUxldmVsID0gbGV2ZWw7XG4gICAgICB0aGlzLmJhdHRlcnlTZXJ2aWNlLnVwZGF0ZUNoYXJhY3RlcmlzdGljKHRoaXMucGxhdGZvcm0uQ2hhcmFjdGVyaXN0aWMuQmF0dGVyeUxldmVsLCB0aGlzLnN0YXRlLmJhdHRlcnlMZXZlbCk7XG4gICAgICB0aGlzLnBsYXRmb3JtLmxvZy5kZWJ1ZyhgWyR7dGhpcy5hY2Nlc3NvcnkuZGlzcGxheU5hbWV9XSBCYXR0ZXJ5IGxldmVsIHVwZGF0ZWQgdG8gJHtsZXZlbH0lYCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3RhdGUuc3RhdHVzTG93QmF0dGVyeSAhPT0gbG93QmF0dGVyeSkge1xuICAgICAgdGhpcy5zdGF0ZS5zdGF0dXNMb3dCYXR0ZXJ5ID0gbG93QmF0dGVyeTtcbiAgICAgIHRoaXMuYmF0dGVyeVNlcnZpY2UudXBkYXRlQ2hhcmFjdGVyaXN0aWModGhpcy5wbGF0Zm9ybS5DaGFyYWN0ZXJpc3RpYy5TdGF0dXNMb3dCYXR0ZXJ5LCB0aGlzLnN0YXRlLnN0YXR1c0xvd0JhdHRlcnkpO1xuICAgICAgdGhpcy5wbGF0Zm9ybS5sb2cuaW5mbyhgWyR7dGhpcy5hY2Nlc3NvcnkuZGlzcGxheU5hbWV9XSBMb3cgYmF0dGVyeSBzdGF0dXMgY2hhbmdlZCB0bzogJHtsb3dCYXR0ZXJ5ID09PSAxID8gJ0xPVycgOiAnTk9STUFMJ31gKTtcbiAgICB9XG4gIH1cbn0iXX0=